utils:::menuShowCRAN()
q()
q()
?read.table()
?names()
?getwd()
source("http://www.bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite()
version
bioconductor
biocLite()
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite()
install.packages("Rserve")
Rserve()
require('Rserve')
Rserve()
require('RSclient')
install.packages("RSclient")
require('RSclient')
c <- RSconnect()
RSshutdown(c)
RSshutdown(c)
RSshutdown()
c
install.packages("RJSONIO")
install.packages(c("slidify", "ggplot2", "devtools"))
install.packages("slidify")
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite(c("GenomicFeatures", "AnnotationDbi"))
library(ggplot2)
search()
library(ggplot2)
search()
version
find.package("devtools")
install.packages("KernSmooth")
library("KernSmooth")
install.packages("swirl")
library("swirl")
swirl()
bye()
R.Version()
find.package("dplyr")
install.package("dplyr")
install.packages("dplyr")
library(dplyr)
library(swirl)
library("swirl")
load("B:/Documents/R/.RData")
library("swirl")
library(swirl)
swirl()
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2, sex_class, count)
gather(students2, sex_class, count, -grade)
res<-gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
swirl::submit()
students3
?gather
swirl::submit()
?spread
swirl::submit()
extract_numeric("class5")
swirl::submit()
students4
swirl::submit()
swirl::submit()
swirl::submit()
passed
failed
as
passed <- passed %>% mutate(status = "passed")
asa
aa
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
sat %>%
select(-contains(c("read_total","math_total","write_total")))
sat %>%
select(-contains(c(read_total,math_total,write_total)))
reset()
?contains
?select
reset()
reset()
swirl::reset()
sat
sat %>%
select(-contains("total"))
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range)
?gather
?separate
swirl::submit()
?gour_by
?group_by
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part, sex)
swirl::submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day label=TRUE)
wday(this_day, label=TRUE)
now()
?now
this_moment<-now()
this_moment
minute(this_moment)
ymd("1989-05-17")
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
mdy(25081985)
dmy(25081985)
ymd("192012"
)
ymd("//192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
ymd_hms("03:22:14")
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment<-update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
now()
now("America/New_York")
nyc<-now("America/New_York")
nyc
nyc +days(2)
depart<-nyc +days(2)
depart
update(depart, hours=17, minutes=34)
depart<-update(depart, hours=17, minutes=34)
depart
depart + hours(15)+minutes(50)
arrive<-depart + hours(15)+minutes(50)
with_tz()
?with_tz
with_tz(arrive)
with_tz(arrive, "Asia/Hong_Kong")
arrive<-with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval
how_long<-new_interval(last_time)
how_long<-new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
install.packages(KernSmooth)
install.packages("KernSmooth")
library(KernSmooth)
Window=100;
Offset = 10;
Depth = 0.9;
sigma=6;
sigma2=exp((sigma-1)*log(2)/2);
X=qnorm(1e-3,0,sigma2);
window2=dnorm(round(X):-round(X),0,sigma2);
wSize=length(window2);
ones=vector(mode="double",length=wSize);
for(i in 1:length(ones)){ones[i]<-1}
require(polynom)
install.packages("polynom");
polynomial(c(1,0,0,3,4)))
polynomial(c(1,0,0,3,4))
install.packages("polynom");
install.packages(polynom);
require("polynom")
require(multipol)
library(multipol)
library("multipol")
install.packages("multipol");
save.image()
Window=100;
Offset = 10;
Depth = 0.9;
sigma=6;
sigma2=exp((sigma-1)*log(2)/2);
X=qnorm(1e-3,0,sigma2);
window2=dnorm(round(X):-round(X),0,sigma2);
wSize=length(window2);
ones=vector(mode="double",length=wSize);
for(i in 1:length(ones)){ones[i]<-1}
vector=ones/wSize;
install.packages("multipol");
install.packages("polynom");
install.packages("multipol");
install.packages("polynom");
library("multipol")
install.packages("multipol");
install.packages("multipol");
library("multipol")
install.packages("multipol");
install.packages(multipol);
install.packages("multipol");
install.packages("multipol");
install.packages("polynom");
library("multipol");
library("polynom");
install.packages("multipol")
install.packages(c("crayon", "curl", "KernSmooth", "manipulate", "R6", "Rcpp", "RCurl", "stringi"))
install.packages("multipol")
install.packages("Rcul");
install.packages("polynom");
library("multipol");
library("polynom");
(p <- polynomial(c(1,0,0,3,4)))
?polynomial
vector
polynomial(vector, vector)
polynomial(vector, x=vector)
multipol(vector, x=vector)
vector*vector
vecot
vector
polyprod(vector, vector)
ones(2,2)
convolve(ones,ones)
?convolve(ones,ones)
?convolve(ones,ones, type="f")
convolve(ones, rev(ones), type="open")
library(Rcpp)
sourceCpp("LemireR.cpp")
setwd("B:/Documents/R")
sourceCpp("LemireR.cpp")
A
A<-read.csv("A.csv", header=F)
View(A)
As<-lemireR(as.numeric(A[1,]),91)
B<-rbind(A,As)
View(B)
write.csv(B,"ab3.csv")
sourceCpp("LemireR.cpp")
As<-lemireR(as.numeric(A[1,]),91)
B<-rbind(A,As)
write.csv(B,"ab3.csv")
As
sourceCpp("LemireR.cpp")
As<-lemireR(as.numeric(A[1,]),91)
B<-rbind(A,As)
write.csv(B,"ab3.csv")
signal=A[1,]
signal
signal=as.numeric(A[1,])
signal
as.numeric(signal)
as.numeric(signal)
as.numeric(signal)
convolve(vector, rev(as.numeric(signal)), type="open");
convolve(vector, rev(as.numeric(signal)), type="open")
convolve(vector, rev(as.numeric(signal)), type="open")[ceil(1.2)]
?ceiling
ceiling(1.2)
Window=100;
Offset = 10;
Depth = 0.9;
sigma=6;
sigma2=exp((sigma-1)*log(2)/2);
X=qnorm(1e-3,0,sigma2);
window2=dnorm(round(X):-round(X),0,sigma2);
wSize=length(window2);
ones=vector(mode="double",length=wSize);
for(i in 1:length(ones)){ones[i]<-1}
vector=ones/wSize;
convolve(vector, rev(as.numeric(signal)), type="open")[ceiling(wSize/2):ceiling(length(signal)-1+(wSize/2))]
C
C=3
C
convolve(vector, rev(as.numeric(signal)), type="open")[ceiling(wSize/2):ceiling(length(signal)-1+(wSize/2))]
convolve(vector, rev(as.numeric(signal)), type="open")
sourceCpp("LemireR.cpp")
sourceCpp("LemireR.cpp")
10+1:12
10+1:12
Window+1:length(signal)-Window
Window+1:length(signal)-Window
library(Rcpp)
sourceCpp("LemireR.cpp");
getwd()
setwd(paste(getwd(),'/TFBSValley', sep = ""))
getwd()
sourceCpp("LemireR.cpp");
library(Rcpp)
sourceCpp("LemireR.cpp");
sourceCpp("LemireR.cpp");
opts_chunk$set(cache = TRUE)
library(knitr)
opts_chunk$set(cache = TRUE)
update.packages("knitr")
update.packages("knitr", dependencies=True)
library(knitr)
opts_chunk$set(cache = TRUE)
#include <Rcpp.h>
// [[Rcpp::export]]
int fibonacci(const int x) {
if (x == 0 || x == 1) return(x);
return (fibonacci(x - 1)) + fibonacci(x - 2);
}
engine.opts=list(showOutput=TRUE, rebuild=FALSE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(knitr)
opts_chunk$set(cache = TRUE)
